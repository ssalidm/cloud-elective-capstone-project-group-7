AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Bookings Management

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
  
Parameters:
  RestApiId:
    Type: String
    Description: API Gateway ID for Storage API

Resources:
  #########################################
  # DynamoDB Table for Bookings
  #########################################
  BookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BookingsTable
      AttributeDefinitions:
        - AttributeName: bookingId
          AttributeType: S
        - AttributeName: customerId
          AttributeType: S
      KeySchema:
        - AttributeName: bookingId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: CustomerIndex
          KeySchema:
            - AttributeName: customerId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  #########################################
  # IAM Role for Lambda Functions
  #########################################
  BookingsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/BookingsTable
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/BookingsTable/index/*

  #########################################
  # Create Booking Function
  #########################################
  CreateBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-booking-function
      CodeUri: src/api/bookings/
      Handler: create_booking.lambda_handler
      Role: 
        Fn::GetAtt:
          - BookingsFunctionRole
          - Arn
      Environment:
        Variables:
          TABLE_NAME: BookingsTable
      Events:
        CreateBooking:
          Type: Api
          Properties:
            RestApiId: 
              Ref: RestApiId
            Path: /bookings
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  #########################################
  # Get Customer Bookings Function
  #########################################
  GetCustomerBookingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-customer-bookings-function
      CodeUri: src/api/bookings/
      Handler: get_customer_bookings.lambda_handler
      Role:
        Fn::GetAtt:
          - BookingsFunctionRole
          - Arn
      Environment:
        Variables:
          TABLE_NAME: BookingsTable
      Events:
        GetCustomerBookings:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApiId
            Path: /customers/{customerId}/bookings
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  #########################################
  # Update Booking Function
  #########################################
  UpdateBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: update-booking-function
      CodeUri: src/api/bookings/
      Handler: update_booking.lambda_handler
      Role: 
        Fn::GetAtt:
          - BookingsFunctionRole
          - Arn
      Environment:
        Variables:
          TABLE_NAME: BookingsTable
      Events:
        UpdateBooking:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApiId
            Path: /bookings/{bookingId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  #########################################
  # Cancel Booking Function
  #########################################
  CancelBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: cancel-booking-function
      CodeUri: src/api/bookings/
      Handler: cancel_booking.lambda_handler
      Role: 
        Fn::GetAtt:
          - BookingsFunctionRole
          - Arn
      Environment:
        Variables:
          TABLE_NAME: BookingsTable
      Events:
        CancelBooking:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApiId
            Path: /bookings/{bookingId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  BookingsTableName:
    Description: Name of the DynamoDB table for bookings
    Value: 
      Ref: BookingsTable
    Export:
      Name: BookingsTableName
