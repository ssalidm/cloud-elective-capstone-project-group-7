AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Storage Facilities
Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
Resources:

  StorageApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: StorageApi
      StageName: dev
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:eu-west-1:476114118819:userpool/eu-west-1_i7fFDRkBC
            Identity:
              Headers:
                - Authorization

    #########################################
    # DynamoDB Customers Table
    #########################################
  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CustomersTable
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  #########################################
  # Create Customer Function
  #########################################                
  CreateCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-customer-function
      CodeUri: src/api/customers/
      Handler: create_customer.lambda_handler
      Runtime: python3.9
      Role: !GetAtt StorageFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: CustomersTable
      Events:
        CreateCustomer:
          Type: Api
          Properties:
            RestApiId: !Ref StorageApi
            Path: /customers
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  #########################################
  # Create Storage Unit Function
  #########################################
  CreateStorageUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-storage-unit-function
      CodeUri: src/api/storage_units/
      Handler: create_storage_unit.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - StorageFunctionRole
          - Arn
      Environment:
        Variables:
          TABLE_NAME: StorageUnitsTable
          STORAGE_TYPES_TABLE: StorageTypesTable
      Events:
        CreateStorageUnit:
          Type: Api
          Properties:
            RestApiId:
              Ref: StorageApi
            Path: /storage-types/{typeId}/units
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  #########################################
  # Get All Storage Units Function
  #########################################
  GetAllUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-all-units-function
      CodeUri: src/api/storage_units/
      Handler: get_all_units.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - StorageFunctionRole
          - Arn
      Environment:
        Variables:
          TABLE_NAME: StorageUnitsTable
      Events:
        GetAllUnits:
          Type: Api
          Properties:
            RestApiId:
              Ref: StorageApi
            Path: /units
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  #########################################
  # Get Storage Units Function
  #########################################
  GetStorageUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-storage-units-function
      CodeUri: src/api/storage_units/
      Handler: get_storage_units.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - StorageFunctionRole
          - Arn
      Environment:
        Variables:
          TABLE_NAME: StorageUnitsTable
      Events:
        GetStorageUnits:
          Type: Api
          Properties:
            RestApiId:
              Ref: StorageApi
            Path: /storage-types/{typeId}/units
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  #########################################
  # Update Unit Function
  #########################################
  UpdateUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: update-unit-function
      CodeUri: src/api/storage_units/
      Handler: update_unit.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - StorageFunctionRole
          - Arn
      Environment:
        Variables:
          TABLE_NAME: StorageUnitsTable
      Events:
        UpdateUnit:
          Type: Api
          Properties:
            RestApiId:
              Ref: StorageApi
            Path: /units/{unitId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  #########################################
  # Update Unit Function
  #########################################
  DeleteUnitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: delete-unit-function
      CodeUri: src/api/storage_units/
      Handler: delete_unit.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - StorageFunctionRole
          - Arn
      Environment:
        Variables:
          TABLE_NAME: StorageUnitsTable
      Events:
        DeleteUnit:
          Type: Api
          Properties:
            RestApiId:
              Ref: StorageApi
            Path: /units/{unitId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: DeleteUnitFunction

#########################################
# Outputs
#########################################
Outputs:
  ApiEndpoint:
    Description: URL for the Storage API Gateway
    Value:
      Fn::Sub: https://${StorageApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
    Export:
      Name: StorageApiEndpoint
  # AdminApiEndpoint:
  #   Description: URL for the Admin API Gateway
  #   Value:
  #     Fn::Sub: https://${AdminEndpointsApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
  #   Export:
  #     Name: AdminApiEndpoint
  StorageTypesTableName:
    Description: Name of the DynamoDB table for storage types
    Value:
      Ref: StorageTypesTable
    Export:
      Name: StorageTypesTableName
  StorageUnitsTableName:
    Description: Name of the DynamoDB table for storage units
    Value:
      Ref: StorageUnitsTable
    Export:
      Name: StorageUnitsTableName
  StorageFunctionRoleArn:
    Description: ARN of the IAM role used by Lambda functions
    Value:
      Fn::GetAtt:
        - StorageFunctionRole
        - Arn
    Export:
      Name: StorageFunctionRoleArn
